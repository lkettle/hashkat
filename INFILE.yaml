
#################################################################
# >> analysis:
#
# Attributes for controlling the duration and type of analysis.
#
#  max_entities: 
#    The maximum amount of entities for which to allocate. Once the network
#    has grown to this amount, the entity add rate will artifically drop to 0.
#    AD: TEMPORARY NOTE Simulation no longer halts at 'max_entities'.
#  max_time:
#    The maximum simulation-time for the simulation. Once it has elapsed, the simulation halts.
#    Interacting with the simulation does not alter the simulation-time.
#  max_real_time:
#    The maximum real-time for the simulation. Once it has elapsed, the simulation halts.
#    Note that interacting with the simulation DOES detract from this time.
#  initial_entities:
#    The initial entity amount to create.
#  enable_interactive_mode:
#    Whether interactive mode should be triggered by Ctrl+C or ./scripts/stop.sh (triggers SIGUSR1).
#  use_barabasi: 
#    If true, the global follow rate is ignored. Follow thresholds not needed.
#  use_random_time_increment: 
#    Increments by 1/sum(rates) on average
#  use_flawed_followback: 
#    Whether to follow-back by a fixed 40%.
#  follow_model: 
#    Accepted models: 'random', 'preferential', 'entity', 'preferential-entity', 'twitter'
#  stage1_unfollow: 
#    Whether to have an unfollow model assuming constant 'chattiness', ie amount of tweets over some interval.
#  unfollow_tweet_rate: 
#    Tweets per minute. Chattiness for which to be considered for unfollow.
#################################################################

analysis:
  max_entities: 
    10001
  max_time: # In minutes
    (365 * 24 * 60) * 0.1
  max_real_time: # In milliseconds
    (60 * 60 * 1000) * 1
  initial_entities:
    100
  enable_interactive_mode:
    true 
  use_barabasi: 
    false 
  use_random_time_increment: 
    true
  use_flawed_followback: 
    false
  follow_model: 
    twitter 
  stage1_unfollow: 
    true
  unfollow_tweet_rate: 
    10 

#################################################################
# >> rates:
#
# The rate function for adding entities to the network.
#################################################################

rates:
  add: {function: constant, value: 1.0}

#################################################################
# >> output:
#
# Various options for the output of the simulation, both while it
# runs and for post-analysis.
#################################################################

output:
  save_network_on_timeout: # Should we save all our data if we hit >= max_real_time?
     true
  save_file: # File to save to, and load from
    network_state.sav
  stdout_basic: true
  stdout_summary: true
  visualize: true
  verbose: true
  entity_stats: true
  degree_distributions: true
  tweet_analysis: true

tweet_ranks: 
  thresholds: {bin_spacing: linear, min: 10, max: 300, increment: 10}
retweet_ranks:
  thresholds: {bin_spacing: linear, min: 10, max: 300, increment: 10}
follow_ranks:
  thresholds: {bin_spacing: linear, min: 0, max: 100001, increment: 1}
  weights:    {bin_spacing: linear, min: 1, max: 100000, increment: 1}

languages:
  weights:
    English: 100
    French: 25
    French+English: 25

#################################################################
# >> tweet_observation: 
#
# An observation probability density function that gives 
# the probability that a tweet is observed at a certain time by an 'ideal observer'. 
# An 'ideal observer' is one which always sees a tweet, eventually.'
# The observation PDF is used for both retweeting and follow-from-tweet.
# We combine this with a relevance factor, r, where 0 <= r <= 1.0, we in turn
# determines the probability that a given entity will act on a given tweet, with enough time.
#
#  density_function:
#    Probability 'density' function to sample logarithmatically.
#    Provided as if a Python function of 'x'. It is integrated using the scipy.integrate module. 
#    Note technically not a true PDF because one does NOT need to have an integral range that sums to 1.0.
#    The function, after integration, _will_ be normalized for you.
#
#  x_start:
#    In arbitrary units. The beginning x-value to integrate from.
#  x_end:
#    In arbitrary units. The end x-value to integrate to.
#
#  initial_resolution:
#    In arbitrary units. The initial binning resolution. 
#    That is, the time-step with which to begin binning. The binning resolution is decreased from there on.
#  resolution_growth_factor:
#    How quickly the resolution grows from one bin to the next. 
#    Quicker is more efficient, but with less precise rates in later bins.
#  time_span:
#    In minutes. The time over which the function is 
#################################################################

tweet_observation: # 'Omega'
   density_function: 1.66 / x 
   x_start: 5
   x_end: 600
   initial_resolution: 2.0
   resolution_growth_factor: 1.05
   time_span: 60 # minutes

#################################################################
# >> tweet_relevance: 
#
# The transmission probability for a person of a certain preference class towards
# a tweet of a given origin & content.
#
#  preference_classes:
#    The different preference stereotypes that users in the network can have.
#################################################################

tweet_relevance: # 'Transmission probability'
    # Determine amount of discrete bins
    # These values should match your C++ config_static.h limits!!
    # Distance is the value [0...1] determined by a modular distance function.
    humour_bins: 2
    distance_bins: 4

    # Determine traits relevant to the relevance determination function 
    # Relevance functions are automatically converted into the necessary tables
    # using Python. The strings provided can be any valid Python, as if wrapped by a
    # Python function as such:
    #
    # def FOO(entity_type, humour, distance): 
    #   return $FOO

    preference_classes:
      - name: LoveEverything
        retweet_relevance:
          all: 1 # Can be any valid Python code
        retweet_relevance:
          all: 1 # Can be any valid Python code
      - name: HateEverything
        retweet_relevance:
          all: 1 # Can be any valid Python code

#################################################################
# >> entities: 
#
# The different types of entities in the network, and their 
# associated rates.
#################################################################

entities:
  - name: Standard
    weights:
      # Weight with which this entity is created
      add: 80 
      # Weight with which this entity is followed in preferential follow
      follow: 5
    # Probability that following this entity results in a follow-back
    followback_probability: 40
    rates: 
        # Rate for follows from this entity:
        follow: {function: constant, value: 0.001}
        # Rate for tweets from this entity:
        tweet: {function: constant, value: 0.001}

  - name: Celebrity
    weights: {add: 5, follow: 80}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.001}
        tweet: {function: constant, value: 0.001}

  - name: Bot
    weights: {add: 5, follow: 0}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.001}
        tweet: {function: constant, value: 0.001}

  - name: Organization
    weights: {add: 10, follow: 15}
    followback_probability: 0
    rates:
        follow: {function: constant, value: 0.001}
        tweet: {function: constant, value: 0.001}
